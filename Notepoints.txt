Complete project context : (code file + design.txt + user sequence diagram(in design pdf) + readme file + below text + database.txt + usermanual.txt +use case diagram in SRS if want)

1)
  A)Problems faced and how i overcame them:
   *Reason for choosing this project is to get hands on practical experience on working with databases and to gain my confidence.
   *These are not problems at all,i feel these as challenges everytime I stuck while doing project

   1)wrote SQL queries easily bcz taught in DBMS course but problem with choosing and using methods of java.sql(jdbc) package according to queries we want and database connection code snippet,so referred some youtube channel for this information 
   2)Never created a database on my own,chose MySQL work bench,struggled a bit to get used to workbench like creating required database and understanding        interface of MySQL work bench
   3)tried designing beautiful user interface for all stages in system but skipped it after realising that my purpose is not to design front end and aim is to create a efficient back end,so just uses terminal to take all inputs.
   4)Thinking about edge cases like handling invalid inputs and invalid requests at each stage of process,even showed to my friends and get some review and     noted down suggested updations from them and got some more edge cases and handled them too.

  B)Learnt points after completion of project:

   1)Came to know that whatever CS fundamentals i studied so become useless if we didnot use that knowledge to solve real world problems 
   2)Got some experience of practical working with databases on own
   3)realised only practical hands on work will convert a student to skillful software developer and pure theoritical knowledge will not help
   4)Modified my learning approach towards anything,trying to think abt what all applications in real life of everything i have learnt like that



2)
   2 new things apart from normal assignment programs:
   a)database connectivity:-to store data outside program so that data is not lost even if program stops execution-jdbc(=java.sql package) contains only       methods to pass queries to RDBMS(MySQL),executing queries will be dont by MySQL RDBMS
   b)Full of exception handling bcz users have high chance of entering invalid details,operations etc

3)Small extra Features implemented inside code:-
   1)input validation for return date entered(checking whether entered date is valid or not) by user during borrow operations,also checks whether entered date is past or not and checks the contact number provided by borrower(just format checking)
   2)has limit of 30days for any book to be borrowed(checks expected return date is within 30days or not while a user is borrowing)-if not cannot be borrowed
   3)imposes fine if returned date and expected return date is different based on no of days late( 1 rupee per day) during returning
   4)full of exception handling such that program will not crash for worst inputs also.
   5)added colours in terminal,like red for unsuccessful and green for successful operations etc

4)General Notepoints:
   a)Comparing user input strings in SQL is not possible but numbers is possible so used bookid instead of book name.(defined database according to this        only)
   b)jdbc=java.sql package simply.
   c)get to know that web application building involves javascript,html,css definitely so chose mobile based application.
   d)Pure java code +importing jdbc package and importing "mysql-jdbc.jar" file to external libraries section in intellij & already defined database in         laptop.(mysql-jdbc.jar file(4-5MB size only) is important to attach to external libraries of java program bcz java program didnot know how to/didnot have    fucntionality of execute queries on database,java.sql(=JDBC) will only contain fucntions to pass strings(queries) to DBMS attached.we have to attach         DBMS(mysql for java file) seperately.
   e)for jdbc knowledge referred "learn programming yourself" youtube channel "jdbc playlist"->very helpful for my library project

5)Features thought but didnot implement bcz of time constraint:-
   a)allow only admins to add and remove a book in library(store all usernames and passwords in one table in database and whenever asked to add or remove option then ask username and password and check in table and allow if there in database)
   b)Due to less proficiency in working with MySQL work bench,instead of putting sid as foreign key in book table and referring to sid value in student table(sid column is common in both book and student tables),inside code i acted like sid is foreign key in dealing with sid values(like checking explicitly sid values in other table exists or not etc-which can be avoided if i directly declare sid as foreign key and gave some option like set null,cascade etc)-this is not an extra feature,just a small mistake due to less proficiency in working with mysql qork bench)-no need to improve anything,just noting this down here
   c)taking input from a graphical interface instead of taking from terminal-java swing(no need of front end,no use of front end i believe).

6)Remaining works left to do bcz of time constraint:-
   a)Getting screenshots of all operations including all facilities by running my program for all cases and merging them into one pdf(time consuming task)-so left it
   b)mention in design.txt which code snippets can be avoided if we declare a foreign key directly in definition of database.
